@page "/Order/{_id:int}"

@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<!---->
@if (OrderDTO is null)
{
    <div>
        Loading...
    </div>
}
else
{
    <div class="align-items-center">
        <div>
            Id: @OrderDTO.Id
        </div>
        <div>
            Name: @OrderDTO.Name
        </div>
        <div>
            State: @OrderDTO.State
        </div>
    </div>
    @if (_showUpdateOrder)
    {
        <UpdateOrder Order="@OrderDTO" OnClickButtonClose="() => _showUpdateOrder = false" />
    }
    <div>
        <button @onclick="() => _showUpdateOrder = true" type="button" class="btn btn-outline-warning btn-sm">
            Edit
        </button>
    </div>

    @if (_showCreateWindows)
    {
        <CreateWindow OrderId="_id" OnWindowCreated="(createdWindow) => HandleOnCreated(createdWindow)" OnClickButtonClose="() => _showCreateWindows = false" />
    }
    <div class="text-center my-3">
        <button type="button" @onclick="() => _showCreateWindows = true" class="btn btn-primary">
            Create window
        </button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in WindowDTOs)
                {
                    <tr>
                        <th scope="row">@item.Id</th>
                        <td>@item.Name</td>
                        <td>@item.Quantity</td>
                        <td>
                            <button @onclick="() => NavigateToWindow(item)" type="button" class="btn btn-outline-primary btn-sm">
                                Details
                            </button>
                            <button @onclick="() => DeleteWindowAsync(item)" type="submit" class="btn btn-outline-danger btn-sm">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}

@code {
    [Parameter]
    public int _id { get; set; }

    private OrderDTO OrderDTO { get; set; }
    private List<WindowDTO> WindowDTOs { get; set; } = new List<WindowDTO>();
    private bool _showCreateWindows = false;
    private bool _showUpdateOrder = false;

    protected override async Task OnInitializedAsync()
    {
        OrderDTO = await _httpClient.GetFromJsonAsync<OrderDTO>($"https://localhost:7147/Order/{_id}");
        Console.WriteLine($"_orderDTO {OrderDTO.Id}, {OrderDTO.Name}, {OrderDTO.State}");

        WindowDTOs = await _httpClient.GetFromJsonAsync<List<WindowDTO>>($"https://localhost:7147/Window/by-order/{_id}");
        Console.WriteLine($"Recieve windows: {WindowDTOs.Count}");
    }

    private async Task DeleteWindowAsync(WindowDTO window)
    {
        Console.WriteLine($"DeleteWind0w: {window.Id}");
        var response = await _httpClient.DeleteAsync($"https://localhost:7147/Window/{window.Id}");
        if (response.IsSuccessStatusCode)
        {
            WindowDTOs.Remove(window);
            Console.WriteLine("Success");
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }

    private void HandleOnCreated(WindowDTO window)
    {
        WindowDTOs.Add(window);
    }

    private void NavigateToWindow(WindowDTO window)
    {
        _navigationManager.NavigateTo($"Window/{window.Id}");
    }
}
