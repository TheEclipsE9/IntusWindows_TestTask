@page "/Order/{Id:int}"



@if (_order is null)
{
    <div>
        Loading...
    </div>
}
else
{
    <div class="align-items-center">
        <div>
            Id: @_order.Id
        </div>
        <div>
            Name: @_order.Name
        </div>
        <div>
            State: @_order.State
        </div>
    </div>

    @if (_showUpdateOrder)
    {
        <UpdateOrder 
            Order="@_order" 
            OnClickButtonClose="() => _showUpdateOrder = false" />
    }
    <div>
        <button @onclick="() => _showUpdateOrder = true" type="button" class="btn btn-warning btn-sm">
            Edit
        </button>
    </div>

    @if (_showCreateWindows)
    {
        <CreateWindow 
            OrderId="Id" 
            OnWindowCreated="(createdWindow) => HandleOnWindowCreated(createdWindow)" 
            OnClickButtonClose="() => _showCreateWindows = false" />
    }
    <div class="text-center my-3">
        <button type="button" @onclick="() => _showCreateWindows = true" class="btn btn-primary">
            Create window
        </button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var window in _windows)
                {
                    <tr>
                        <th scope="row">@window.Id</th>
                        <td>@window.Name</td>
                        <td>@window.Quantity</td>
                        <td>
                            <button @onclick="() => NavigateToWindow(window)" type="button" class="btn btn-outline-primary btn-sm">
                                Details
                            </button>
                            <button @onclick="() => DeleteWindowAsync(window)" type="submit" class="btn btn-outline-danger btn-sm">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject] private HttpClient _httpClient { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] private APIEndpoints _apiEndpoints { get; set; }

    private OrderDTO _order = null;
    private List<WindowDTO> _windows = new List<WindowDTO>();
    private bool _showCreateWindows = false;
    private bool _showUpdateOrder = false;

    protected override async Task OnInitializedAsync()
    {
        _order = await _httpClient.GetFromJsonAsync<OrderDTO>($"{_apiEndpoints.ServerBaseAddress}/Order/{Id}") ?? _order;
        _windows = await _httpClient.GetFromJsonAsync<List<WindowDTO>>($"{_apiEndpoints.ServerBaseAddress}/Window/by-order/{Id}") ?? _windows;
    }

    private async Task DeleteWindowAsync(WindowDTO window)
    {
        var response = await _httpClient.DeleteAsync($"{_apiEndpoints.ServerBaseAddress}/Window/{window.Id}");
        if (response.IsSuccessStatusCode)
        {
            _windows.Remove(window);
        }
        else
        {
            Console.WriteLine("Failed DeleteWindowAsync");
        }
    }

    private void HandleOnWindowCreated(WindowDTO createdWindow)
        => _windows.Add(createdWindow);

    private void NavigateToWindow(WindowDTO window)
        => _navigationManager.NavigateTo($"Window/{window.Id}");
}
