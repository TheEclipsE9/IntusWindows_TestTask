@page "/Window/{Id:int}"



@if (_window is null)
{
    <div>
        Loading...
    </div>
}
else
{
    <div class="align-items-center">
        <div>
            Id: @_window.Id
        </div>
        <div>
            Name: @_window.Name
        </div>
        <div>
            Quantity: @_window.Quantity
        </div>
    </div>
    @if (_showUpdateWindow)
    {
        <UpdateWindow 
            Window="@_window" 
            OnClickButtonClose="() => _showUpdateWindow = false" />
    }
    <div>
        <button @onclick="() => _showUpdateWindow = true" type="button" class="btn btn-warning btn-sm">
            Edit
        </button>
    </div>

    @if (_showUpdateSubElement && _subElementToUpdate is not null)
    {
        <UpdateSubElement 
            SubElement="_subElementToUpdate" 
            OnClickButtonClose="() => _showUpdateSubElement = false" />
    }

    @if (_showCreateSubElement)
    {
        <CreateSubElement 
            WindowId="Id" 
            OnSubElementCreated="(subElement) => HandleOnSubElementCreated(subElement)" 
            OnClickButtonClose="() => _showCreateSubElement = false" />
    }
    <div class="text-center my-3">
        <button type="button" @onclick="() => _showCreateSubElement = true" class="btn btn-primary">
            Create sub element
        </button>
    </div>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Type</th>
                    <th scope="col">Width</th>
                    <th scope="col">Height</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subElement in _subElements)
                {
                    <tr>
                        <th scope="row">@subElement.Id</th>
                        <td>@Enum.GetName(subElement.Type)</td>
                        <td>@subElement.Width</td>
                        <td>@subElement.Height</td>
                        <td>
                            <button @onclick="() => {_showUpdateSubElement = true; _subElementToUpdate = subElement; }" type="submit" class="btn btn-warning btn-sm">
                                Edit
                            </button>
                            <button @onclick="() => DeleteSubElementAsync(subElement)" type="submit" class="btn btn-outline-danger btn-sm">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject] private HttpClient _httpClient { get; set; }
    [Inject] private APIEndpoints _apiEndpoints { get; set; }

    private WindowDTO _window = null;
    private List<SubElementDTO> _subElements = new List<SubElementDTO>();
    private bool _showCreateSubElement = false;
    private bool _showUpdateWindow = false;
    private bool _showUpdateSubElement = false;
    private SubElementDTO _subElementToUpdate = null;

    protected override async Task OnInitializedAsync()
    {
        _window = await _httpClient.GetFromJsonAsync<WindowDTO>($"{_apiEndpoints.ServerBaseAddress}/Window/{Id}") ?? _window;
        _subElements = await _httpClient.GetFromJsonAsync<List<SubElementDTO>>($"{_apiEndpoints.ServerBaseAddress}/SubElement/by-window/{Id}") ?? _subElements;
    }

    private async Task DeleteSubElementAsync(SubElementDTO subElement)
    {
        var response = await _httpClient.DeleteAsync($"{_apiEndpoints.ServerBaseAddress}/SubElement/{subElement.Id}");
        if (response.IsSuccessStatusCode)
        {
            _subElements.Remove(subElement);
        }
        else
        {
            Console.WriteLine("Failed DeleteSubElementAsync");
        }
    }

    private void HandleOnSubElementCreated(SubElementDTO createdSubElement)
        => _subElements.Add(createdSubElement);
}
