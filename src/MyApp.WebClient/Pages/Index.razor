@page "/"

@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<!---->
@if (_showCreateOrder)
{
    <CreateOrder OnOrderCreated="(createdOrder) => HandleOnOrderCreated(createdOrder)" OnClickButtonClose="() => _showCreateOrder = false" />
}
<div>
    Cur: @_env
</div>
<div class="text-center my-3">
    <button type="button" @onclick="() => _showCreateOrder = true" class="btn btn-primary">
        Create order
    </button>
</div>


<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">State</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Orders)
            {
                <tr>
                    <th scope="row">@item.Id</th>
                    <td>@item.Name</td>
                    <td>@item.State</td>
                    <td>
                        <button @onclick="() => NavigateToOrder(item)" type="button" class="btn btn-outline-primary btn-sm">
                            Details
                        </button>
                        <button @onclick="() => DeleteOrderAsync(item)" type="submit" class="btn btn-outline-danger btn-sm">
                            Delete
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>

@code {
    [Inject] IConfiguration Configuration { get; set; }
    [Inject] APIEndpoints APIEndpoints { get; set; }
    private string _env;
    private bool _showCreateOrder = false;
    private List<OrderDTO> Orders { get; set; } = new List<OrderDTO>();

    protected override async Task OnInitializedAsync()
    {
        _env = Configuration.GetValue<string>("Environment");
        Console.WriteLine(APIEndpoints.ServerBaseAddress);
        try
        {
            Orders = await _httpClient.GetFromJsonAsync<List<OrderDTO>>($"{APIEndpoints.ServerBaseAddress}/Order");
        }
        catch (Exception)
        {
            Console.WriteLine("Failed");
            throw;
        }
    }

    private void NavigateToOrder(OrderDTO order)
    {
        _navigationManager.NavigateTo($"Order/{order.Id}");
    }

    private async Task DeleteOrderAsync(OrderDTO order)
    {
        Console.WriteLine($"DeleteOrder: {order.Id}");
        var response = await _httpClient.DeleteAsync($"{APIEndpoints.ServerBaseAddress}/Order/{order.Id}");
        if (response.IsSuccessStatusCode)
        {
            Orders.Remove(order);
            Console.WriteLine("Success");
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }

    private void HandleOnOrderCreated(OrderDTO order)
    {
        Orders.Add(order);
    }
}