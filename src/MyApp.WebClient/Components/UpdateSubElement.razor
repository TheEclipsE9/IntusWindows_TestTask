@inject HttpClient _httpClient

<!---->

<div class="modal fade show d-block bg-black-l" id="staticBackdrop" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Update order</h1>
                <button type="button" @onclick="() => OnClickButtonClose.InvokeAsync()" class="btn-close" aria-label="Close"></button>
            </div>
            <EditForm Model="_updateSubElementDTO" OnValidSubmit="UpdateSubElementAsync">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="Type" class="form-label">Type</label>
                        <InputSelect @bind-Value="_updateSubElementDTO.Type" class="form-select" id="Type">
                            @foreach (var type in Enum.GetValues(typeof(SubElementType)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="Width" class="form-label">Width</label>
                        <InputNumber @bind-Value="_updateSubElementDTO.Width" class="form-control" id="Width" />
                    </div>
                    <div class="mb-3">
                        <label for="Height" class="form-label">Height</label>
                        <InputNumber @bind-Value="_updateSubElementDTO.Height" class="form-control" id="Height" />
                    </div>

                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="() => OnClickButtonClose.InvokeAsync()" class="btn btn-secondary">Close</button>
                    <button type="submit" class="btn btn-primary">Update</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public SubElementDTO SubElement { get; set; }

    [Parameter]
    public EventCallback OnClickButtonClose { get; set; }

    private UpdateSubElementDTO _updateSubElementDTO;

    protected override void OnInitialized()
    {
        _updateSubElementDTO = new UpdateSubElementDTO()
            {
                Type = SubElement.Type,
                Width = SubElement.Width,
                Height = SubElement.Height
            };
    }

    private async Task UpdateSubElementAsync()
    {
        Console.WriteLine($"UpdateWindowAsync: {_updateSubElementDTO.Type}; {_updateSubElementDTO.Width}; {_updateSubElementDTO.Height}");
        var response = await _httpClient.PutAsJsonAsync<UpdateSubElementDTO>($"https://localhost:7147/SubElement/{SubElement.Id}", _updateSubElementDTO);
        if (response.IsSuccessStatusCode)
        {
            var updated = await response.Content.ReadFromJsonAsync<UpdateSubElementDTO>();
            if (updated is null)
            {
                Console.WriteLine("Updated is null");
            }
            else
            {
                SubElement.Type = updated.Type;
                SubElement.Width = updated.Width;
                SubElement.Height = updated.Height;
                Console.WriteLine("Success");
            }
        }
        else
        {
            Console.WriteLine("Failed");
        }
        await OnClickButtonClose.InvokeAsync();
    }
}
