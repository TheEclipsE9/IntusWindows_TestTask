@inject HttpClient _httpClient

<!---->

<div class="modal fade show d-block" id="staticBackdrop" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Update order</h1>
                <button type="button" @onclick="() => OnClickButtonClose.InvokeAsync()" class="btn-close" aria-label="Close"></button>
            </div>
            <EditForm Model="_updateOrderDTO" OnValidSubmit="UpdateOrderAsync">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="Name" class="form-label">Name</label>
                        <InputText @bind-Value="_updateOrderDTO.Name" class="form-control" id="Name" />
                    </div>
                    <div class="mb-3">
                        <label for="State" class="form-label">State</label>
                        <InputText @bind-Value="_updateOrderDTO.State" class="form-control" id="State" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="() => OnClickButtonClose.InvokeAsync()" class="btn btn-secondary">Close</button>
                    <button type="submit" class="btn btn-primary">Update</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public OrderDTO Order { get; set; }

    [Parameter]
    public EventCallback OnClickButtonClose { get; set; }

    private UpdateOrderDTO _updateOrderDTO;

    protected override void OnInitialized()
    {
        _updateOrderDTO = new UpdateOrderDTO()
        {
            Name = Order.Name,
            State = Order.State
        };
    }

    private async Task UpdateOrderAsync()
    {
        Console.WriteLine($"UpdateOrderAsync: {_updateOrderDTO.Name}; {_updateOrderDTO.State}");
        var response = await _httpClient.PutAsJsonAsync<UpdateOrderDTO>($"https://localhost:7147/Order/{Order.Id}", _updateOrderDTO);
        if (response.IsSuccessStatusCode)
        {
            var updated = await response.Content.ReadFromJsonAsync<OrderDTO>();
            if (updated is null)
            {
                Console.WriteLine("Updated is null");
            }
            else
            {
                Order.Name = updated.Name;
                Order.State = updated.State;
                Console.WriteLine("Success");
            }
        }
        else
        {
            Console.WriteLine("Failed");
        }
        await OnClickButtonClose.InvokeAsync();
    }
}
